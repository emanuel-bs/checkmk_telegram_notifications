#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Telegram

# SPDX-FileCopyrightText: 2013 Mathias Kettner <mk@mathias-kettner.de>
# SPDX-FileCopyrightText: 2021 Stefan Gehn <stefan+cmk@srcbox.net>
#
# SPDX-License-Identifier: GPL-2.0-only

# Telegram notification based on asciimail notification from check_mk 1.2.6p16.

from __future__ import unicode_literals

import sys
import requests
from cmk.notification_plugins import utils


tmpl_host_text = """$HOSTSTATE_EMOJI$ $HOSTNAME_FORMATTED$
```
Host:     $HOSTNAME$
Event:    $EVENT_TXT$
Output:   $HOSTOUTPUT_ESCAPED$
```"""

tmpl_service_text = """$SERVICESTATE_EMOJI$ $SERVICEDESC_FORMATTED$
```
Host:     $HOSTNAME$
Service:  $SERVICEDESC$
Event:    $EVENT_TXT$
Output:   $SERVICEOUTPUT_ESCAPED$
```"""


def hoststate_as_emoji(hoststate):
    if hoststate == "UP":
        return "\ud83d\udd35"  # large blue circle
    elif hoststate == "DOWN":
        return "\ud83d\udd34"  # large red circle
    elif hoststate == "UNREACH":
        return "\u26aa\ufe0f"  # medium white circle
    return hoststate


def servicestate_as_emoji(servicestate):
    if servicestate == "OK":
        return "\ud83c\udd97"  # squared ok
    elif servicestate == "WARN":
        return "\u26a0\ufe0f"  # warning sign
    elif servicestate == "CRIT":
        return "\u2757\ufe0f"  # heavy exclamation mark symbol
    elif servicestate == "UNKN":
        return "\u2754"  # white question mark ornament
    return servicestate


def construct_message_text(context):
    context["HOSTSTATE_EMOJI"] = hoststate_as_emoji(context.get("HOSTSHORTSTATE", ""))
    context["SERVICESTATE_EMOJI"] = servicestate_as_emoji(
        context.get("SERVICESHORTSTATE", "")
    )

    notification_type = context["NOTIFICATIONTYPE"]
    if notification_type in ["PROBLEM", "RECOVERY"]:
        txt_info = "$PREVIOUS@HARDSHORTSTATE$ -> $@SHORTSTATE$"
    elif notification_type.startswith("FLAP"):
        if "START" in notification_type:
            txt_info = "Started Flapping"
        else:
            txt_info = "Stopped Flapping ($@SHORTSTATE$)"
    elif notification_type.startswith("DOWNTIME"):
        what = notification_type[8:].title()
        txt_info = "Downtime " + what + " ($@SHORTSTATE$)"
    elif notification_type == "ACKNOWLEDGEMENT":
        txt_info = "Acknowledged ($@SHORTSTATE$)"
    elif notification_type == "CUSTOM":
        txt_info = "Custom Notification ($@SHORTSTATE$)"
    else:
        txt_info = notification_type  # Should never happen

    context["EVENT_TXT"] = utils.substitute_context(
        txt_info.replace("@", context["WHAT"]), context
    )

    if context["WHAT"] == "HOST":
        tmpl_text = tmpl_host_text
    else:
        tmpl_text = tmpl_service_text

    return utils.substitute_context(tmpl_text, context)


def send_telegram_message(token, chat_id, text):
    url = "https://api.telegram.org/bot{}/sendMessage".format(token)
    json = {
        "chat_id": chat_id,
        "disable_web_page_preview": True,
        "parse_mode": "MarkdownV2",
        "text": text,
    }
    r = requests.post(url=url, json=json)

    if r.status_code != 200:
        sys.stderr.write(
            "Failed to send Telegram message. Status: {}, Response: {}\n".format(
                r.status_code, r.text
            )
        )
        sys.exit(2)


def extend_context(context):
    if context.get('PARAMETER_URL_PREFIX'):
        context["HOSTNAME_LINK"] = utils.host_url_from_context(context).\
            replace('-', r'\-')
        context["SERVICE_LINK"] = utils.service_url_from_context(context).\
            replace('-', r'\-')
        context["HOSTNAME_ESCAPED"] = context["HOSTNAME"].\
            replace('.', r'\.').\
            replace('-', r'\-')
        context["SERVICEDESC_ESCAPED"] = context["SERVICEDESC"].\
            replace('.', r'\.').\
            replace('-', r'\-')
        context["SERVICEOUTPUT_ESCAPED"] = context["SERVICEOUTPUT"].\
            replace('-', r'\-')
        context["HOSTOUTPUT_ESCAPED"] = context["HOSTOUTPUT"].\
            replace('-', r'\-')
        context["HOSTNAME_FORMATTED"] = '[%s](%s)' % (
            context["HOSTNAME_ESCAPED"],
            context["HOSTNAME_LINK"]
        )
        context["SERVICEDESC_FORMATTED"] = '[%s/%s](%s)' % (
            context["HOSTNAME_ESCAPED"],
            context["SERVICEDESC_ESCAPED"],
            context["SERVICE_LINK"]
        )
    else:
        context["HOSTNAME_FORMATTED"] = '`%s`' % (context["HOSTNAME"])
        context["SERVICEDESC_FORMATTED"] = '`%s/%s`' % (
            context["HOSTNAME"],
            context["SERVICEDESC"]
        )


def main():
    context = utils.collect_context()
    extend_context(context)
    token = context["PARAMETER_BOT_TOKEN"]
    chat_id = context["PARAMETER_CHAT_ID"]
    text = construct_message_text(context)
    return send_telegram_message(token, chat_id, text)


if __name__ == "__main__":
    sys.exit(main())
